from queue import Queue
 class Graph:
    n = None
    matrix = []
    dfs_list = []
    bfs_list = []
    def __init__(self, matrix: list, verbose: bool = False, n: int = 0) -> None:
        """
        Args:
            matrix (list): adjency matrix
            verbose (bool, optional): To use terminal. Defaults to False.
            n (int, optional): number of nodes. Defaults to 0.
        """
        if verbose:
            for i in range(n):
                row = []
                for j in range(n):
                    connection = int(
                        input("Enter 0 if no connection between " + str(i) + " 
and " + str(j) + " else enter 1: "))
                    row.append(connection)
                self.matrix.append(row)
        else:
            self.matrix = matrix
    def printGraph(self) -> None:
        """
        Function for displaying graph
        """
        for row in self.matrix:
            print(row)
    def dfs(self, source: int, visited: list) -> list:
        """
        DFS implementation using adjacency matrix
        Args:
            source (int): starting node of the graph
            visited (list): boolean list for visited nodes
        Returns:
            list: dfs sequence
        """
        self.dfs_list.append(source)
        visited[source] = True
        row = self.matrix[source]
        for node in range(len(row)):
            if (visited[node] == False and self.matrix[source][node] != 0):
                self.dfs(node, visited)
        return self.dfs_list
    def bfs(self, source: int, visited: list) -> list:
        """
        BFS implementation using adjacency matrix
        Args:
            source (int): starting node of the graph
            visited (list): boolean list for visited nodes
        Returns:
            list: bfs sequence
        """
        queue = Queue()
        queue.put(source)
        visited[source] = True
        while (queue.empty() != True):
            curr = queue.get()
            self.bfs_list.append(curr)
            row = self.matrix[curr]
            for node in range(len(row)):
                if (visited[node] == False and self.matrix[curr][node] != 0):
                    queue.put(node)
                    visited[node] = True
        return self.bfs_list
    def to_file(self, filename: str, language: str = "py") -> bool:
        f = open(filename, 'w')
        code = """from queue import Queue
        class Graph:
            n = None
            matrix = []
            dfs_list = []
            bfs_list = []
            def __init__(self, matrix:list, verbose:bool=False, n:int=0) -> 
None:
                if verbose:
                    for i in range(n):
                        row = []
                        for j in range(n):
                            connection = int(input("Enter 0 if no connection 
between " + str(i) + " and " + str(j) + " else enter 1: "))
                            row.append(connection)
                        self.matrix.append(row)
                else:
                    self.matrix = matrix
            def printGraph(self) -> None:
                for row in self.matrix:
                    print(row)
            def dfs(self, source:int, visited:list) -> list:
                self.dfs_list.append(source)
                visited[source] = True
                row = self.matrix[source]
                for node in range(len(row)):
                    if (visited[node] == False and self.matrix[source][node] != 
0):
 = 0):
                        self.dfs(node, visited)
                return self.dfs_list
            def bfs(self, source:int, visited:list) -> list:
                queue = Queue()
                queue.put(source)
                visited[source] = True
                while (queue.empty() != True):
                    curr = queue.get()
                    self.bfs_list.append(curr)
                    row = self.matrix[curr]
                    for node in range(len(row)):
                        if (visited[node] == False and self.matrix[curr][node] !
                            queue.put(node)
                            visited[node] = True
                return self.bfs_list
        """
        f.write(code)
        f.close()
        return True
 if __name__ == "__main__":
    matrix = [[0, 1, 1, 0],
              [1, 0, 0, 1],
              [1, 0, 0, 1],
              [1, 1, 1, 0]]
    obj = Graph(matrix)
    obj.printGraph()
    visited = [False] * 4
    print(obj.dfs(0, visited))
    visited = [False] * 4
    print(obj.bfs(0, visited))
    obj.to_file("code.py")


#DFS

import copy
 class Node:
    def __init__(self, data, level, fval):
        self.data = data
        self.level = level
        self.fval = fval
    def generate_child(self):
        x, y = self.find(self.data, '_')
        val_list = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, self.level + 1, 0)
                children.append(child_node)
        return children
    def shuffle(self, data, x1, y1, x2, y2):
        if x2 >= 0 and x2 < len(data) and y2 >= 0 and y2 < len(data):
            temp_data = copy.deepcopy(data)
            temp = temp_data[x2][y2]
            temp_data[x2][y2] = temp_data[x1][y1]
            temp_data[x1][y1] = temp
            return temp_data
        else:
            return None
    def find(self, data, x):
        for i in range(len(self.data)):
            for j in range(len(self.data)):
                if data[i][j] == x:
                    return i, j
 class Puzzle:
    def __init__(self, size):
        self.size = size
        self.open = []
        self.closed = []
    def accept(self):
        puz = []
        for i in range(0, self.size):
            temp = input().split(" ")
            puz.append(temp)
        return puz
    def f(self, start, goal):
        return self.h(start.data, goal) + start.level
    def h(self, start, goal):
        temp = 0
        for i in range(0, self.size):
            for j in range(0, self.size):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp
    def process(self):
        print("enter the start state matrix \n")
        start = self.accept()
        print("enter the goal state matrix \n")
        goal = self.accept()
        start = Node(start, 0, 0)
        start.fval = self.f(start, goal)
        self.open.append(start)
        print("\n\n")
        while True:
            cur = self.open[0]
            print("\n")
            for i in cur.data:
                for j in i:
                    print(j, end=" ")
                print("")
            if (self.h(cur.data, goal) == 0):
                break
            for i in cur.generate_child():
                i.fval = self.f(i, goal)
                self.open.append(i)
            self.closed.append(cur)
            del self.open[0]
            self.open.sort(key=lambda x: x.fval, reverse=False)
 puz = Puzzle(3)
 puz.process()
